@model EntityLayer.Concrete.Dtos.UrunlerDto
@{
    ViewData["Title"] = "Ürün Listesi";
    Layout = "~/Views/Layoutt/Index.cshtml"; ;
}

<div class="container mt-5">
    <div class="main-container">

        <form id="filterform" class="card p-3 mb-4 shadow-sm">
            <div class="card-header bg-primary text-white">
                <i class="fas fa-filter"></i> Ürün Filtreleme
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Marka</label>
                        <input type="text" id="markainput" name="marka" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Ad</label>
                        <input type="text" id="adiinput" name="adi" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Barkod No</label>
                        <input type="text" id="barkodinput" name="barkod" class="form-control" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Stok Durumu</label>
                        <select id="stokdrop" class="form-control">
                            <option value="">Tümü</option>
                            @foreach (var value in Enum.GetValues(typeof(EntityLayer.Concrete.Enums.StokMiktar)))
                            {
                                <option value="@value">@value</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Başlangıç Tarihi</label>
                        <input type="text" id="baslangicTarihi" name="baslangicTarihi"
                               class="form-control datepicker" autocomplete="off" />
                    </div>
                    <div class="col-md-3 mb-3">
                        <label class="form-label">Bitiş Tarihi</label>
                        <input type="text" id="bitisTarihi" name="bitisTarihi" class="form-control datepicker"
                               autocomplete="off" />
                    </div>
                </div>
                <div class="text-end">
                    <button type="button" id="filterbutton" class="btn btn-outline-success">
                        <i class="fas fa-search"></i> Filtrele
                    </button>
                </div>
            </div>
        </form>
        <div class="dropdown-container card shadow-sm p-3 mb-4 bg-white rounded">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="yeniUrunDropdown"
                    data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-plus-circle"></i> Yeni Ürün Ekle
            </button>
            <ul class="dropdown-menu" aria-labelledby="yeniUrunDropdown">
                <li>
                    <a class="dropdown-item" href="#" onclick="loadModal(0)">
                        <i class="fas fa-box-open"></i> Ürün
                        Ekle
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" onclick="loadExcelModal()">
                        <i class="fas fa-file-excel"></i> Excel ile Ekle
                    </a>
                </li>
            </ul>
        </div>
        <br />
        <div class="grid-container card shadow-sm p-3 mb-4 bg-white rounded">
            <table id="grid" class="table table-striped"></table>
            <div id="pager"></div>
        </div>
    </div>
</div>

@Html.Partial("DynamicModal")

@section Scripts{
    <script>
        jQuery("#grid").jqGrid({
            url: '@Url.Action("GetUrunler", "Urunler")',
            datatype: "json",
            mtype: "GET",
            colNames: ['Ekleyen Satıcı', 'Marka', 'Adı', 'BarkodNo', 'Açıklama', 'Birim', 'Alış Fiyatı', 'Satış Fiyatı', 'Stok', 'Tarih', 'Detay', 'İşlemler'],
            colModel: [
                { name: 'userName', index: 'userName', width: 100, editable: false },
                { name: 'markaAdi', index: 'markaAdi', width: 100, editable: true },
                { name: 'adi', index: 'adi', width: 80, editable: true },
                { name: 'barkodNo', index: 'barkodNo', width: 90, editable: true },
                { name: 'aciklama', index: 'aciklama', width: 120, editable: true },
                { name: 'birimAdi', index: 'birimAdi', width: 80, sortable: false, editable: true },
                {
                    name: 'alisFiyat', index: 'alisFiyat', width: 80, editable: true,
                    editrules: { number: true }, formatter: 'number',
                    formatoptions: { decimalPlaces: 2 }
                },
                {
                    name: 'satisFiyat', index: 'satisFiyat', width: 80, editable: true,
                    editrules: { number: true }, formatter: 'number',
                    formatoptions: { decimalPlaces: 2 }
                },
                {
                    name: 'stok', index: 'stok', width: 80, editable: true,
                    editrules: { integer: true }
                },
                {
                    name: 'tarih', index: 'tarih', width: 80, editable: false,
                    formatter: "date", formatoptions: { srcformat: "Y-m-d\\TH:i:s", newformat: "d/m/Y" }
                },
                { name: 'islemler', width: 120, formatter: ButtonFormatter, sortable: false, editable: false },  
                { name: 'detay', width: 120, formatter: ButtonDetailsFormatter, sortable: false, editable: false },  
            ],
            rowNum: 10,
            rowList: [5, 10, 20, 50],
            pager: '#pager',
            sortname: 'BarkodNo',
            viewrecords: true,
            sortorder: "desc",
            caption: "Ürünler",
            jsonReader: {
                root: "rows.items",
                page: "rows.pageIndex",
                total: "rows.totalPages",
                records: "total",
                repeatitems: false,
                id: "barkodNo"
            },

            gridComplete: function () {
                $(".deletebutton").click(function () {
                    var id = $(this).data("id");
                    deleteitem(id);
                });
                $(".updatebutton").click(function () {
                    var id = $(this).data("id");
                    loadModal(id);
                });
                $(".detailbutton").click(function () {
                    var id = $(this).data("id");
                    loadDetailModal(id);
                });
                var grid = $("#grid");
                var ids = grid.getDataIDs();

                for (var i = 0; i < ids.length; i++) {
                    var rowData = grid.getRowData(ids[i]);
                    var stokMiktari = parseInt(rowData.stok);
                    var kritikMiktar = parseInt(rowData.kritikStokMiktarı);
                    var eksikMiktar = parseInt(rowData.eksikStokMiktarı);

                    if (stokMiktari <= kritikMiktar) {
                        $("#" + ids[i]).find("td").css({
                            "background-color": "#ffcccc",
                            "color": "#000000"
                        });
                    } else if (stokMiktari > kritikMiktar && stokMiktari < eksikMiktar) {
                        $("#" + ids[i]).find("td").css({
                            "background-color": "#ffff99",
                            "color": "#000000"
                        });
                    }
                }
            },
            loadError: function (xhr, status, error) {
                alert("Veri yüklenirken hata oluştu: " + error);
            },
            height: "auto",
            autowidth: true,
            shrinkToFit: true,
            rownumbers: true,
            pagerpos: "center",
            loadonce: false,
            pgbuttons: true,
            pginput: true,
            recordpos: "left",
            pgtext: "Sayfa {0} / {1}",
            emptyrecords: "Kayıt bulunamadı",
            loadtext: "Yükleniyor..."
        });

        jQuery("#grid").jqGrid('navGrid', '#pager', { edit: false, add: false, del: false });


        function ButtonFormatter(cellvalue, options, rowObject) {
            return `<div style="display: flex; gap: 5px;">
            <button class="deletebutton btn btn-danger" data-id="${rowObject.id}">Sil</button>
            <button class="updatebutton btn btn-primary" data-id="${rowObject.id}">Düzenle</button>
            </div>`;
        }
        function ButtonDetailsFormatter(cellvalue, options, rowObject) {
            return `<div style="display: flex; gap: 5px;">
            <button class="detailbutton btn btn-success" data-id="${rowObject.id}">Detay</button>
            </div>`;
        }

        function loadModal(id) {
            $.ajax({
                url: '/Urunler/GetPopUpContent',
                type: 'GET',
                data: { id: id },
                success: function (response) {
                    $("#modalContent").html(response);
                    $("#dynamicModal").modal("show");
                },
                error: function () {
                    $.gritter.add({
                        title: 'Hata',
                        text: 'Sunucu ile iletişim kurulurken bir hata oluştu',
                        class_name: 'gritter-error'
                    });
                }
            });
        }

        function loadDetailModal(id) {
            $.ajax({
                url: '/Urunler/ProductDetailPartial',
                type: 'GET',
                data: {id: id},
                success: function (response) {
                    $("#modalContent").html(response);
                    $("#dynamicModal").modal("show");
                },
            });
        }

        function loadExcelModal() {
            $.ajax({
                url: '/Urunler/ExcelPartial',
                type: 'GET',
                success: function (response) {
                    $("#modalContent").html(response);
                    $("#dynamicModal").modal("show");
                },
            });
        }

        function deleteitem(id) {
            bootbox.confirm({
                message: "Bu ürünü silmek istediğinize emin misiniz?",
                buttons: {
                    cancel: {
                        label: '<i class="fa fa-times"></i> Hayır',
                        result: false
                    },
                    confirm: {
                        label: '<i class="fa fa-check"></i> Evet',
                        result: true
                    }
                },
                callback: function (result) {
                    if (result) {
                        $.ajax({
                            type: "POST",
                            url: "/Urunler/DeleteItem",
                            data: { id: id },
                            success: function (response) {
                                if (response.success) {
                                    $.gritter.add({
                                        title: "Başarılı",
                                        text: "Ürün başarıyla silindi.",
                                        class_name: "gritter-success"
                                    });
                                    $("#grid").trigger("reloadGrid");
                                }
                            },
                            error: function () {
                                alert("Ürün silinirken bir hata oluştu.");
                            }
                        })
                    }
                }
            });
        }

        $(document).ready(function () {
            $('.datepicker').datepicker({
                format: 'dd/mm/yyyy',
                language: 'tr',
                autoclose: true,
                todayHighlight: true,
                clearBtn: true
            });
        });


        function formatDate(dateStr) {
            if (!dateStr) return '';
            var parts = dateStr.split('/');
            if (parts.length === 3) {
                return parts[2] + '-' + parts[1].padStart(2, '0') + '-' + parts[0].padStart(2, '0');
            }
            return dateStr;
        }

        $("#filterbutton").click(function (e) {
            e.preventDefault();
            var formdata = $("#filterform").serialize();
            $("#grid").jqGrid('setGridParam', {
                url: '@Url.Action("GetFilterItem", "Urunler")',
                postData: {
                    formdata,
                    rows: $("#grid").getGridParam("rowNum"),
                    page: 1
                },
                page: 1
            }).trigger("reloadGrid");
        })

    </script>
}