@model EntityLayer.Concrete.Dtos.UrunlerDto


<form id="addnewitemfrom" method="post">

    <div class="form-group">
        <label class="form-label">Marka</label>
        <span asp-validation-for="MarkaAdi" class="text-danger"></span>
        <select id="markaselect" asp-for="MarkaAdi" class="form-control">
            <option value="">Marka seçiniz</option>
        </select>
    </div>

    <div class="form-group">
        <label class="form-label">Ad</label>
        <span asp-validation-for="Adi" class="text-danger"></span>
        <input type="text" asp-for="Adi" class="form-control" id="adi" />
    </div>

    <div class="form-group">
        <label class="form-label">Barkod No</label>
        <span asp-validation-for="BarkodNo" class="text-danger"></span>
        <input type="text" asp-for="BarkodNo" class="form-control" id="barkod" />
    </div>

    <div class="form-group">
        <label class="form-label">Açıklama</label>
        <span asp-validation-for="Aciklama" class="text-danger"></span>
        <input type="text" asp-for="Aciklama" class="form-control" id="aciklama" />
    </div>

    <div class="form-group">
        <label class="form-label">Birim</label>
        <span asp-validation-for="BirimAdi" class="text-danger"></span>
        <select id="birimselect" asp-for="BirimAdi" class="form-control">
            <option value="">Birim seçiniz</option>
        </select>
    </div>

    <div class="form-group">
        <label class="form-label">Alış Fiyatı</label>
        <span asp-validation-for="AlisFiyat" class="text-danger"></span>
        <input type="text" asp-for="AlisFiyat" class="form-control" id="alisfiyat"
            oninput="this.value = this.value.replace(/[^0-9.]/g, '')" />
    </div>

    <div class="form-group">
        <label class="form-label">Satış Fiyatı</label>
        <span asp-validation-for="SatisFiyat" class="text-danger"></span>
        <input type="text" datatype="float" asp-for="SatisFiyat" class="form-control" id="satisfiyat"
            oninput="this.value = this.value.replace(/[^0-9.]/g, '')" />
    </div>

    <div class="form-group" id="depostok">
        <label class="form-label">Ana Depo Başlangıç Stok Miktarı</label>
        <span asp-validation-for="Stok" class="text-danger"></span>
        <input type="text" asp-for="Stok" class="form-control" id="stok" />
    </div>

    <a class="btn btn-primary" onclick="openDepoDropdown()">Başka Depo Ekle</a>

    <input type="hidden" asp-for="DepoVerileri" id="depoDatas" name="DepoVerileri" />

    <div class="form-group">
        <label class="form-label">Kritik Stok Miktarı</label>
        <span asp-validation-for="KritikStokMiktarı" class="text-danger"></span>
        <input type="text" asp-for="KritikStokMiktarı" class="form-control" id="kritikstokmiktari" />
    </div>

    <div class="form-group">
        <label class="form-label">Eksik Stok Miktarı</label>
        <span asp-validation-for="EksikStokMiktarı" class="text-danger"></span>
        <input type="text" asp-for="EksikStokMiktarı" class="form-control" id="eksikstokmiktari" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Kaydet</button>
</form>

<script>

    let selectedDepos = new Set();
    let depoStokValues = [];

    function openDepoDropdown() {
        // Depo listesini getir ve kullanılabilir depo olup olmadığını kontrol et
        getDepos(function (availableDepos) {
            if (availableDepos.length === 0) {
                alert("Eklenebilecek başka depo yok!");
                return; // Eğer eklenebilecek depo kalmadıysa dropdown oluşturma
            }

            document.createElement("br");
            document.createElement("label").innerHTML = "Depo seçiniz";
            let depoDropdown = document.createElement("select");
            depoDropdown.id = "deposelect";
            depoDropdown.classList.add("form-control");

            depoDropdown.innerHTML = `<option value="">Depo seçiniz</option>`;
            document.getElementById("depostok").appendChild(depoDropdown);

            // Depo listesini dropdown'a ekle
            availableDepos.forEach(depo => {
                console.log(depo.id);
                $("#deposelect").append(`<option value="${depo.ad}" data-depoid="${depo.id}">${depo.ad}</option>`);
            });

            $("#deposelect").on('change', function () {
                let selectedDepo = $("#deposelect").val();
                let selectedDepoId = $("#deposelect option:selected").data("depoid");
                if (selectedDepo) {
                    console.log("Depo seçildi:", selectedDepo);
                    createNewDepoInput(selectedDepo, selectedDepoId);
                    selectedDepos.add(selectedDepo);
                }
                depoDropdown.remove();
            });
        });
    }

    function createNewDepoInput(depoAd, depoid) {
        document.createElement("br");
        let depoLabel = document.createElement("label");
        let depoInput = document.createElement("input");
        depoLabel.innerHTML = `${depoAd} başlangıç stok miktarı`;
        depoInput.type = "number";
        depoInput.classList.add("form-control");
        depoInput.setAttribute("data-depo", depoAd);
        depoStokValues.push({ depoid: depoid, depo: depoAd, stok: 0 })

        depoInput.oninput = function () {
            updateDepoStok(depoAd, depoInput.value);// Input değiştikçe listeyi güncelle
        };
        document.getElementById("depostok").appendChild(depoLabel);
        document.getElementById("depostok").appendChild(depoInput);

    }

    function updateDepoStok(depoAd, stokSayisi) {
        depoStokValues = depoStokValues.map(item =>
            item.depo === depoAd ? { ...item, stok: parseInt(stokSayisi) } : item
        );
        console.log(depoAd, stokSayisi);
        depoStokValues.forEach(item => {
            console.log(item.depo, item.stok);
        });
    }

    function getDepos(callback) {
        $.ajax({
            type: "GET",
            url: '/Depo/GetDefaultntDepo',
            success: function (response) {
                if (response) {
                    let availableDepos = response
                        .filter(item => !selectedDepos.has(item.ad));
                    callback(availableDepos); // Filtrelenmiş depo listesini döndür
                } else {
                    $.gritter.add({
                        title: "Hata",
                        text: "Depolar getirilirken bir hata oluştu.",
                        class_name: "gritter-error"
                    });
                    callback([]);
                }
            },
            error: function () {
                alert("Depolar getirilirken hata oluştu.");
                callback([]);
            }
        });
    }


    $(document).ready(function () {
        var id = @Html.Raw(Json.Serialize(ViewBag.Id)); // Razor'dan JS değişkenine güvenli dönüşüm
        if (id !== 0) {
            edititem(id);
        }
    });

    $(document).ready(function () {
        $.ajax({
            type: "GET",
            url: '/UrunOzellik/GetItems',
            data: { type: 'marka'},
            success: function (response) {
                if (response.success) {
                    response.items.forEach(function (item) {
                        $("#markaselect").append(`<option value="${item.ad}" >${item.ad}</option>`);
                    });
                } else {
                    $.gritter.add({
                        title: "Hata",
                        text: "Markalar getirilirken bir hata oluştu.",
                        class_name: "gritter-error"
                    });
                }
            },
            error: function () {
                alert("Markalar getirilirken hata oluştu.");
            }
        });
    });

    $(document).ready(function () {
        $.ajax({
            type: "GET",
            url: '/UrunOzellik/GetItems',
            data: { type: 'birim' },
            success: function (response) {
                if (response.success) {
                    response.items.forEach(function (item) {
                        $("#birimselect").append(`<option value="${item.ad}">${item.ad}</option>`);
                    });
                } else {
                    $.gritter.add({
                        title: "Hata",
                        text: "Markalar getirilirken bir hata oluştu.",
                        class_name: "gritter-error"
                    });
                }
            },
            error: function () {
                alert("Markalar getirilirken hata oluştu.");
            }
        });
    });

    function closeform() {
        $("#newitemform").css("display", "none");
    }

    $(document).ready(function () {
        $("#addnewitemfrom").submit(function (event) {
            event.preventDefault();

            // Depo verilerini JSON'a çevir ve hidden input'a ata
            var depoDataJson = JSON.stringify(depoStokValues);
            console.log("BURAYAAAAAAAAAAAAAAAA" + depoDataJson);
            $("#depoDatas").val(depoDataJson);
            console.log("Depo Verileri:", $("#depoDatas").val(depoDataJson));
            // Değerin doğru atandığını kontrol et
            console.log("Depo Verileri:", $("#depoDatas").val());

            var formdata = $("#addnewitemfrom").serialize();
            console.log("Form Data:", formdata);
            if ($("#addnewitemfrom").valid()) {
                $.ajax({
                    type: "POST",
                    url: "/Urunler/Save",
                    data: formdata,
                    success: function (response) {
                        if (response.success) {
                            if (response.create) {
                                $.gritter.add({
                                    title: "Başarılı",
                                    text: "Ürün başarıyla eklendi.",
                                    class_name: "gritter-success"
                                });
                            }
                            else {
                                $.gritter.add({
                                    title: "Başarılı",
                                    text: "Ürün başarıyla güncellendi.",
                                    class_name: "gritter-success"
                                });
                            }
                            $("#dynamicModal").modal("hide");
                            $("#grid").trigger("reloadGrid");
                        } else {
                            alert("Ürün eklenirken bir hata oluştu.");
                        }
                    },
                    error: function () {
                        alert("Sunucu hatası oluştu");
                    }
                });
            }
            return false;
        });
    });

    function edititem(id) {
        $.ajax({
            type: "GET",
            url: '/Urunler/GetById',
            data: { id: id },
            success: function (data) {
                if (data) {

                    $("#marka").val(data.marka);
                    $("#adi").val(data.adi);
                    $("#barkod").val(data.barkodNo);
                    $("#aciklama").val(data.aciklama);
                    $("#birim").val(data.birim);
                    $("#alisfiyat").val(data.alisFiyat);
                    $("#satisfiyat").val(data.satisFiyat);
                    $("#stok").val(data.stok);
                    $("#kritikstokmiktari").val(data.kritikStokMiktari);
                    $("#stok").val(data.eksikStokMiktari);

                    let idinput = document.createElement("input");
                    idinput.type = "hidden";
                    idinput.name = "Id";
                    idinput.id = "id"
                    $("#addnewitemfrom").append(idinput);
                    $("#id").val(data.id);
                } else {
                    $.gritter.add({
                        title: "Hata",
                        text: "Ürün bilgisi bulunamadı.",
                        class_name: "gritter-error"
                    });
                }
            },
            error: function () {
                alert("Ürün bilgileri getirilirken hata oluştu.");
            }
        });
    }
</script>